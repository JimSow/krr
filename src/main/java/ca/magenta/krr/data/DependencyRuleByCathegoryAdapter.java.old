package ca.magenta.krr.data;


import ca.magenta.krr.fact.Fact;
import ca.magenta.krr.fact.Message;

import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonSerializationContext;

import java.lang.reflect.Type;

import org.apache.log4j.Logger;

public class DependencyRuleByCathegoryAdapter implements JsonDeserializer<DependencyRuleByCathegory>, JsonSerializer<DependencyRuleByCathegory> {

	private static Logger logger = Logger.getLogger(DependencyRuleByCathegoryAdapter.class);

	@Override
	  public JsonElement serialize(final DependencyRuleByCathegory dependencyRuleByCathegory, final Type typeOfSrc, final JsonSerializationContext context) {

		logger.trace("In serialize");

		final JsonObject jsonObject = new JsonObject();
	    jsonObject.addProperty("size", dependencyRuleByCathegory.getDependencyRuleByCathegoryHashMap().size());

	    return jsonObject;
	  }
	
	@Override
	public DependencyRuleByCathegory deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
		
		DependencyRuleByCathegory dependencyRuleByCathegory = new DependencyRuleByCathegory();
		
		logger.trace("In deserialize");
		logger.trace(json.toString());
//		JsonObject jsonObject = json.getAsJsonObject();
//		JsonPrimitive prim = (JsonPrimitive) jsonObject.get(CLASSNAME);
//		String className = prim.getAsString();
//
//		Class<?> klass = null;
//		try {
//			klass = Class.forName(className);
//		} catch (ClassNotFoundException e) {
//			throw new JsonParseException(e.getMessage());
//		}
		
		return dependencyRuleByCathegory;
	}

}