package ca.magenta.correlation.data;

import java.util.Iterator;
import java.util.Vector;

import org.apache.log4j.Logger;


public class Chain<T> implements Iterable<T> {
	
	@Override
	public String toString() {
		String str = "";
//		for(int )
			
			
		
		
		return str;
	}

	private static Logger logger = Logger.getLogger(Chain.class);
	
	private int groundIndex = 0;
	
	private Vector<T> chain = new Vector<T>();
	
	public void insertGround(T item)
	{
		chain.insertElementAt(item, groundIndex);
	}
	
	public T getGround()
	{
		if (chain.size() > groundIndex)
		{
			return chain.get(groundIndex);
		}
		
		return null;
	}
	
	public void addMostSpecific(T item)
	{
		chain.add(item);
	}

	public void addMostGeneric(T item)
	{
		if (chain.size() > 0)
		{
			groundIndex++;
		}
		chain.insertElementAt(item, 0);
		
	}
	
	synchronized public T getMostGeneric() {
		return chain.get(0);
	}

	synchronized public T getMostSpecific() {
		return chain.get(chain.size()-1);
	}

	@Override
	public Iterator<T> iterator() {
		return chain.iterator();
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((chain == null) ? 0 : chain.hashCode());
		result = prime * result + groundIndex;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Chain other = (Chain) obj;
		if (chain == null) {
			if (other.chain != null)
				return false;
		} else if (!chain.equals(other.chain))
			return false;
		if (groundIndex != other.groundIndex)
			return false;
		return true;
	}

}
